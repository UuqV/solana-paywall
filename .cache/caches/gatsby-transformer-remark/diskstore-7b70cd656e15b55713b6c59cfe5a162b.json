{"expireTime":9007200890715168000,"key":"transformer-remark-markdown-ast-be581de9e68d782cf4b6bdc5b6c2b171-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Everybody loves a good visualization. I figure you know your dataset is sticky when your clients immediately want more. So naturally, when my product owner came back to me with a set of fresh requests for various UI knobs the client can use to explore the data, we were ready to deliver it to them ASAP. We would create a set of filter panels, to select data much in the same way you could with any SQL query.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":410,"offset":410},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":410,"offset":410},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since these filters resemble simple database operations, at first I thought to implement these filters on the server side. In general I try to do as much data shaping as possible on the server side to save the client’s computer from unnecessary rendering. It might even be good to cache the results of these filters as well. However, since these requests happen separately from the initial page load, it would be way more expensive in terms of round-trip network time to filter this data on the server side.","position":{"start":{"line":4,"column":1,"offset":412},"end":{"line":4,"column":508,"offset":919},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":412},"end":{"line":4,"column":508,"offset":919},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So now we know roughly what our requirements are. We must be able to filter by a complex set of requirements, and we must do so on the client side. So where do we filter the data? Luckily, we have a Redux store. Surely it should be able to help us manage this complex state. In Redux we usually transform state as a result of an action inside the reducers. So to implement a filter, we might write a reducer like this:","position":{"start":{"line":6,"column":1,"offset":921},"end":{"line":6,"column":419,"offset":1339},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":921},"end":{"line":6,"column":419,"offset":1339},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">case FILTER_APPLES:\n    return {\n        ...state,\n        shipments: _.filter(state.shipments, shipment => {\n            return shipment.type != 'Apples';\n    });\n};</code></pre></div>","position":{"start":{"line":8,"column":1,"offset":1341},"end":{"line":16,"column":4,"offset":1515},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This way, you have a set of your filtered items that was created only once, that all your components can use. But you also want to be able to put them back. Maybe you could do something like this?","position":{"start":{"line":18,"column":1,"offset":1517},"end":{"line":18,"column":197,"offset":1713},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1517},"end":{"line":18,"column":197,"offset":1713},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">case FILTER_APPLES:\n    return {\n        ...state,\n        filteredShipments: _.filter(state.shipments, shipment => {\n            return shipment.type != 'Apples';\n        });\n    };\ncase ADD_APPLES:\n    return {\n        ...state,\n        filteredShipments: state.shipments\n    };\n};</code></pre></div>","position":{"start":{"line":20,"column":1,"offset":1715},"end":{"line":34,"column":4,"offset":2006},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This would work for just one filter. But with the Oranges and the Date filter, you’d have to somehow check each one in the reducer for each one. This is also screaming of a redux antipattern: you’re not really supposed to read state in the reducers, just write, and your data could be stale here.","position":{"start":{"line":36,"column":1,"offset":2008},"end":{"line":36,"column":297,"offset":2304},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2008},"end":{"line":36,"column":297,"offset":2304},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So what in the world do we do? What I found on the subject confirms the suspicion of an anti-pattern: our state is our “source of truth,” we shouldn’t eliminate state on the basis of a temporary filter. The only thing we need the state to store is whether the filter is on or not. The filter should indeed be part of the render cycle for the component, and the function responsible for preparing the state for a view is good old mapDispatchToProps:","position":{"start":{"line":38,"column":1,"offset":2306},"end":{"line":38,"column":449,"offset":2754},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2306},"end":{"line":38,"column":449,"offset":2754},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function mapStateToProps(state) {\n   return {\n       filteredList: () => {\n           if (state.filterApples) {\n               return _.filter(shipments, shipment => {\n                   return shipment.type != 'Apples';\n               });\n           } else {\n               return shipments;\n           }\n       },\n   };\n}</code></pre></div>","position":{"start":{"line":40,"column":1,"offset":2756},"end":{"line":54,"column":4,"offset":3087},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You could nest several filter functions this way. However, we run back into the original problem: we don’t want to run several nested filters every time a component re-renders. That, and we might want to use it in more than one component.","position":{"start":{"line":56,"column":1,"offset":3089},"end":{"line":56,"column":239,"offset":3327},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3089},"end":{"line":56,"column":239,"offset":3327},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is where the all-powerful reselect extension comes into play. They’re specifically meant to produce derived data from the state. In addition to allowing you to modularize the functionality in your mapStateToProps, ","position":{"start":{"line":58,"column":1,"offset":3329},"end":{"line":58,"column":220,"offset":3548},"indent":[]}},{"type":"html","value":"<b>","position":{"start":{"line":58,"column":220,"offset":3548},"end":{"line":58,"column":223,"offset":3551},"indent":[]}},{"type":"text","value":"selectors do not get computed until one of their arguments change","position":{"start":{"line":58,"column":223,"offset":3551},"end":{"line":58,"column":288,"offset":3616},"indent":[]}},{"type":"html","value":"</b>","position":{"start":{"line":58,"column":288,"offset":3616},"end":{"line":58,"column":292,"offset":3620},"indent":[]}},{"type":"text","value":". This means that we can rewrite our filter functionality to look like this:","position":{"start":{"line":58,"column":292,"offset":3620},"end":{"line":58,"column":368,"offset":3696},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3329},"end":{"line":58,"column":368,"offset":3696},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getApples = state => {\n   if (state.filterApples) {\n       return _.filter(shipments, shipment => {\n           return shipment.type == 'Apples';\n       });\n   } else {\n       return [];\n   }\n};\n\nconst getOranges = state => {\n   if (state.filterOranges) {\n       return _.filter(shipments, shipment => {\n           return shipment.type == 'Oranges';\n       });\n   } else {\n       return [];\n   }\n};\n\nconst getFilteredList = createSelector(\n   [getShipments, getApples, getOranges],\n   (shipments, apples, oranges) => {\n       return _.difference(shipments, apples, oranges);\n   }\n);</code></pre></div>","position":{"start":{"line":60,"column":1,"offset":3698},"end":{"line":87,"column":4,"offset":4293},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After importing this function, we can then call it in mapStateToProps like so:","position":{"start":{"line":89,"column":1,"offset":4295},"end":{"line":89,"column":79,"offset":4373},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4295},"end":{"line":89,"column":79,"offset":4373},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function mapStateToProps(state) {\n   return {\n       filteredStatements: getFilteredList(state),\n   };\n}</code></pre></div>","position":{"start":{"line":91,"column":1,"offset":4375},"end":{"line":97,"column":4,"offset":4487},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This solves our code repetition problem. (Using ","position":{"start":{"line":99,"column":1,"offset":4489},"end":{"line":99,"column":49,"offset":4537},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":99,"column":49,"offset":4537},"end":{"line":99,"column":51,"offset":4539},"indent":[]}},{"type":"text","value":".difference to remove your filtered sets will work as long as you don’t have any duplicates.) Also, this function won’t run unless the state actually changes.","position":{"start":{"line":99,"column":51,"offset":4539},"end":{"line":99,"column":209,"offset":4697},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":4489},"end":{"line":99,"column":209,"offset":4697},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But wait! If you dropped a couple of console.logs in here, you’d notice that whenever the Apples filter runs, the Oranges filter also runs! That’s not much different than before. If anything changes in the state, these filters still have to run again. How do we get the level of specificity afforded to us by reducers?","position":{"start":{"line":101,"column":1,"offset":4699},"end":{"line":101,"column":319,"offset":5017},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":4699},"end":{"line":101,"column":319,"offset":5017},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Turns out this code needs one more thing to really shine. When we use the createSelector() function, the selector then listens for one of its arguments to change. Since the argument functions require the whole state, the selector calls those functions whenever the whole state changes. We need to give these functions just a piece of state instead, like so:","position":{"start":{"line":103,"column":1,"offset":5019},"end":{"line":103,"column":358,"offset":5376},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5019},"end":{"line":103,"column":358,"offset":5376},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getFilterOranges = state => state.filterOranges;\nconst getFilterApples = state => state.filterApples;</code></pre></div>","position":{"start":{"line":105,"column":1,"offset":5378},"end":{"line":108,"column":4,"offset":5493},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And turn the filter functions into their own selectors that will only run when these two functions change.","position":{"start":{"line":110,"column":1,"offset":5495},"end":{"line":110,"column":107,"offset":5601},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":5495},"end":{"line":110,"column":107,"offset":5601},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getRisk = createSelector([getShipments, getFilterOranges], (shipments, filterOranges) => {\n   if (state.filterOranges) {\n       return _.filter(shipments, shipment => {\n           return shipment.type == 'Oranges';\n       });\n   } else {\n       return [];\n   }\n};\n\nconst getFilteredList = createSelector(\n   [getShipments, getApples, getOranges],\n   (shipments, apples, oranges) => {\n       return _.difference(shipments, apples, oranges);\n   }\n);</code></pre></div>","position":{"start":{"line":112,"column":1,"offset":5603},"end":{"line":129,"column":4,"offset":6064},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Thanks to the boolean in the redux store, we can now filter this data view from any component we like, and thanks to the selector, the filter will only re-run when the filter is turned on or off, or if new shipments come in. Congratulations on your fantastic component!","position":{"start":{"line":131,"column":1,"offset":6066},"end":{"line":131,"column":270,"offset":6335},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":6066},"end":{"line":131,"column":270,"offset":6335},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":132,"column":1,"offset":6336}}}}